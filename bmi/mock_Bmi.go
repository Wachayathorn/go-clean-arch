// Code generated by mockery v2.20.0. DO NOT EDIT.

package bmi

import (
	context "context"

	domain "github.com/bxcodec/go-clean-arch/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockBmi is an autogenerated mock type for the Bmi type
type MockBmi struct {
	mock.Mock
}

type MockBmi_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBmi) EXPECT() *MockBmi_Expecter {
	return &MockBmi_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, bmi
func (_m *MockBmi) Create(ctx context.Context, bmi domain.BmiRequest) (domain.BmiResponse, error) {
	ret := _m.Called(ctx, bmi)

	var r0 domain.BmiResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.BmiRequest) (domain.BmiResponse, error)); ok {
		return rf(ctx, bmi)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.BmiRequest) domain.BmiResponse); ok {
		r0 = rf(ctx, bmi)
	} else {
		r0 = ret.Get(0).(domain.BmiResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.BmiRequest) error); ok {
		r1 = rf(ctx, bmi)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBmi_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockBmi_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - bmi domain.BmiRequest
func (_e *MockBmi_Expecter) Create(ctx interface{}, bmi interface{}) *MockBmi_Create_Call {
	return &MockBmi_Create_Call{Call: _e.mock.On("Create", ctx, bmi)}
}

func (_c *MockBmi_Create_Call) Run(run func(ctx context.Context, bmi domain.BmiRequest)) *MockBmi_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.BmiRequest))
	})
	return _c
}

func (_c *MockBmi_Create_Call) Return(_a0 domain.BmiResponse, _a1 error) *MockBmi_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBmi_Create_Call) RunAndReturn(run func(context.Context, domain.BmiRequest) (domain.BmiResponse, error)) *MockBmi_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByID provides a mock function with given fields: ctx, id
func (_m *MockBmi) DeleteByID(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBmi_DeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByID'
type MockBmi_DeleteByID_Call struct {
	*mock.Call
}

// DeleteByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockBmi_Expecter) DeleteByID(ctx interface{}, id interface{}) *MockBmi_DeleteByID_Call {
	return &MockBmi_DeleteByID_Call{Call: _e.mock.On("DeleteByID", ctx, id)}
}

func (_c *MockBmi_DeleteByID_Call) Run(run func(ctx context.Context, id int)) *MockBmi_DeleteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockBmi_DeleteByID_Call) Return(_a0 error) *MockBmi_DeleteByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBmi_DeleteByID_Call) RunAndReturn(run func(context.Context, int) error) *MockBmi_DeleteByID_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx
func (_m *MockBmi) Get(ctx context.Context) (domain.BmisResponse, error) {
	ret := _m.Called(ctx)

	var r0 domain.BmisResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (domain.BmisResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) domain.BmisResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.BmisResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBmi_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBmi_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBmi_Expecter) Get(ctx interface{}) *MockBmi_Get_Call {
	return &MockBmi_Get_Call{Call: _e.mock.On("Get", ctx)}
}

func (_c *MockBmi_Get_Call) Run(run func(ctx context.Context)) *MockBmi_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBmi_Get_Call) Return(_a0 domain.BmisResponse, _a1 error) *MockBmi_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBmi_Get_Call) RunAndReturn(run func(context.Context) (domain.BmisResponse, error)) *MockBmi_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockBmi) GetByID(ctx context.Context, id int) (domain.BmiResponse, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.BmiResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.BmiResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.BmiResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.BmiResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBmi_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockBmi_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockBmi_Expecter) GetByID(ctx interface{}, id interface{}) *MockBmi_GetByID_Call {
	return &MockBmi_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockBmi_GetByID_Call) Run(run func(ctx context.Context, id int)) *MockBmi_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockBmi_GetByID_Call) Return(_a0 domain.BmiResponse, _a1 error) *MockBmi_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBmi_GetByID_Call) RunAndReturn(run func(context.Context, int) (domain.BmiResponse, error)) *MockBmi_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByID provides a mock function with given fields: ctx, id, req
func (_m *MockBmi) UpdateByID(ctx context.Context, id int, req domain.BmiRequest) (domain.BmiResponse, error) {
	ret := _m.Called(ctx, id, req)

	var r0 domain.BmiResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, domain.BmiRequest) (domain.BmiResponse, error)); ok {
		return rf(ctx, id, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, domain.BmiRequest) domain.BmiResponse); ok {
		r0 = rf(ctx, id, req)
	} else {
		r0 = ret.Get(0).(domain.BmiResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, domain.BmiRequest) error); ok {
		r1 = rf(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBmi_UpdateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByID'
type MockBmi_UpdateByID_Call struct {
	*mock.Call
}

// UpdateByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - req domain.BmiRequest
func (_e *MockBmi_Expecter) UpdateByID(ctx interface{}, id interface{}, req interface{}) *MockBmi_UpdateByID_Call {
	return &MockBmi_UpdateByID_Call{Call: _e.mock.On("UpdateByID", ctx, id, req)}
}

func (_c *MockBmi_UpdateByID_Call) Run(run func(ctx context.Context, id int, req domain.BmiRequest)) *MockBmi_UpdateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(domain.BmiRequest))
	})
	return _c
}

func (_c *MockBmi_UpdateByID_Call) Return(_a0 domain.BmiResponse, _a1 error) *MockBmi_UpdateByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBmi_UpdateByID_Call) RunAndReturn(run func(context.Context, int, domain.BmiRequest) (domain.BmiResponse, error)) *MockBmi_UpdateByID_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockBmi interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockBmi creates a new instance of MockBmi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockBmi(t mockConstructorTestingTNewMockBmi) *MockBmi {
	mock := &MockBmi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
